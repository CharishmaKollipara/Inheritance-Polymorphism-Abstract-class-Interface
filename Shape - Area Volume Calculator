Question

Shape - Area Volume Calculator

Create an abstract public class Shape with the below public abstract methods :

     public double area() 

     public double volume()

Create a public class Rectangle with private attributes :

       double length

      double width

Write the public getters and setters for these attributes.

Rectangle class should inherit the Shape class

      Area of rectangle is length * width

Create a public class Triangle with private attributes :

      double base

      double height

Write the public getters and setters for these attributes.

Triangle class should inherit the Shape class

      Area of triangle is  1/2 * base * height

 Create a public class Cube with private attributes :

      double length

     double width

     double height

 Write the public getters and setters for these attributes.

  Cube class should inherit the Shape class

      Area of cube is  2 * length * width + 2 * length * height + 2* width * height

      Volume of cube is  length * width * height

 Create a public class Sphere with private attributes :

      double radius

 Write the public getters and setters for these attributes.

 Sphere class should inherit the Shape class

        Area of  Sphere is  4  * PI * radius2

        Volume of Sphere is   ( 4  * PI * radius3 ) / 3

 Note : You should use Math.PI for the value of PI

For Rectangle and Triangle class the method volume should return -1.

Create an interface Spatial which is a marker interface. Classes that has proper implementation for volume should implement this interface.

 Create a public Main class which has the main method.

 Create an array of Shape of size 5.

 Get the Shape type and the corresponding attributes and store those objects in the array.

  Print the area and volume of the objects created.

  Volume of the array object should be printed only if it is of Spatial Type.

 Sample Input :

 Triangle


10

20

Sphere

14

Rectangle

14

15

Cube

5

7

9

Triangle

18

24

Sample Output

Area 100.0

Area 2463.0086404143976

Volume 11494.040321933855

Area 210.0

Area 286.0

Volume 315.0

Area 216.0

Note : Volume is displayed only when the shape is cube or sphere





Main.java


import java.util.*;

public class Main {

	public static void main(String[] args) {
		Triangle triangleobject = new Triangle();
		Rectangle rectangleobject = new Rectangle();
		Cube cubeobject = new Cube();
		Sphere sphereobject = new Sphere();
		double area,volume;
		Scanner sc = new Scanner(System.in);
		String[] Shape = new String[5];
		int i = 0;
		for (i = 0; i < 5; i++) {
			Shape[i] = sc.next();
			String s = Shape[i].toUpperCase();
			if (Shape[i].equals("Triangle")) {
				triangleobject.setBase(sc.nextDouble());
				triangleobject.setHeight(sc.nextDouble());
				area=triangleobject.area();
				System.out.println("Area " + area);
			//	triangleobject.volume();
			} else if (Shape[i].equals("Cube")) {
				cubeobject.setLength(sc.nextDouble());
				cubeobject.setWidth(sc.nextDouble());
				cubeobject.setHeight(sc.nextDouble());
				area=cubeobject.area();
				System.out.println("Area " + area);
				volume=cubeobject.volume();
				System.out.println("Volume " + volume);
			} else if (Shape[i].equals("Sphere")) {
				sphereobject.setRadius(sc.nextDouble());
				area=sphereobject.area();
				System.out.println("Area " + area);
				volume=sphereobject.volume();
				System.out.println("Volume " + volume);
			} else if (Shape[i].equals("Rectangle")) {
				rectangleobject.setLength(sc.nextDouble());
				rectangleobject.setWidth(sc.nextDouble());
				area=rectangleobject.area();
				System.out.println("Area " + area);
			}
		}

	}

}



Cube.java



public class Cube extends Shape implements Spatial{
	private double length;
	private double width;
	private double height;
	public double getLength() {
		return length;
	}
	public void setLength(double length) {
		this.length = length;
	}
	public double getWidth() {
		return width;
	}
	public void setWidth(double width) {
		this.width = width;
	}
	public double getHeight() {
		return height;
	}
	public void setHeight(double height) {
		this.height = height;
	}
	@Override
	public double area() {
		double area = (2 * length * width) + (2 * length * height) + (2 * width * height);
		System.out.println("Area " + area);
		return area;
	}
	@Override
	public double volume() {
		double volume = length * width * height;
		System.out.println("Volume " + volume);
		return volume;
	}
}



Rectangle.java


public class Rectangle extends Shape{
	private double length;
	private double width;
	public double getLength() {
		return length;
	}
	public void setLength(double length) {
		this.length = length;
	}
	public double getWidth() {
		return width;
	}
	public void setWidth(double width) {
		this.width = width;
	}
	@Override
	public double area() {
		double area = length * width;
		System.out.println("Area " + area);
		return area;
	}
	@Override
	public double volume() {
		//double volume = -1;
		return -1;
	}
	
}



Shape.java


abstract public class Shape {
	public abstract double area();
	public abstract double volume(); 
}


Spatial.java

public interface Spatial
{
    
}

Sphere.java

import java.math.*;
public class Sphere extends Shape implements Spatial{
	private double radius;
	public double getRadius() {
		return radius;
	}
	public void setRadius(double radius) {
		this.radius = radius;
	}
	@Override
	public double area() {
		double area = 4 * Math.PI * radius * radius;
		System.out.println("Area " + area);
		return area;
	}
	@Override
	public double volume() {
		double volume = (4 * Math.PI * radius * radius * radius) / 3;
		System.out.println("Volume " + volume);
		return volume;
	}
	
}


Triangle.java



public class Triangle extends Shape{
	private double base;
	private double height;
	public double getBase() {
		return base;
	}
	public void setBase(double base) {
		this.base = base;
	}
	public double getHeight() {
		return height;
	}
	public void setHeight(double height) {
		this.height = height;
	}
	@Override
	public double area() {
		double area = 0.5 * base * height;
		System.out.println("Area " + area);
		return area;
	}
	@Override
	public double volume() {
		//double volume = -1;
		return -1;
	}
	
}

